üîß Build a full-stack, interactive stock price forecasting web application using Node.js and Python (FastAPI) on Replit. The app must:

‚úÖ BACKEND (Python + FastAPI):

1. Use `yfinance` to fetch:
   - Historical stock prices (OHLCV)
   - Fundamentals (e.g., PE ratio, EPS, market cap, book value)
   - Technical indicators (e.g., RSI, MACD, SMA, Bollinger Bands via `ta` or `ta-lib`)

2. Use `TradingEconomics` and `World Bank` APIs to fetch country-level **macroeconomic indicators**, such as:
   - GDP growth
   - Inflation
   - Interest rates
   - Unemployment
   - Exchange rates
   - Government debt

3. Allow the user to **select feature types** to use in the forecast model:
   - `Just Prices`: OHLCV only
   - `Prices + Technicals`
   - `Prices + Fundamentals`
   - `Prices + Macro`
   - `All Combined` (Full Feature Set)

4. Provide **predefined feature presets** the user can choose from:
   - **Basic**: Close price, Volume, SMA
   - **Technical**: Close, RSI, MACD, Bollinger
   - **Macro + Price**: Close, GDP, CPI, Rates
   - **Fundamental Mix**: PE ratio, Market Cap, Close
   - **Custom**: User-defined selection

5. Implement a **modular ML/DL forecasting engine** with the following models:
   - ARIMA
   - Facebook Prophet
   - LSTM (Keras)
   - XGBoost
   - Optional: Holt-Winters, SARIMA, DeepAR (placeholders allowed)

6. Allow the user to select forecast horizon (e.g., 7D, 30D) and windowing method.

7. Build a **backtesting module** that evaluates models using:
   - Rolling forecasts
   - MAE, RMSE, MAPE, Sharpe ratio

8. Enable model optimization with `Optuna` or `GridSearchCV`.

‚úÖ FRONTEND (Node.js + React or plain HTML + JS):
1. Clean, modern dashboard using Tailwind CSS or Bootstrap.
2. Pages must include:
   - Ticker input + country selector
   - Feature type selector (with preset options)
   - Model selector (multi-model support)
   - Forecast length input
   - Submit button to train + predict
   - Output: line chart with actual vs forecast (Chart.js or Plotly.js)
   - Display of macro features used
   - Backtest results + performance metrics
   - Download results as CSV or JSON

‚úÖ INTEGRATION:
- Node.js manages frontend and sends REST calls to Python (FastAPI) backend.
- Keep training lightweight to fit within Replit limits (e.g., ~6 months of data).
- Use in-memory caching to avoid redundant API calls.
- Use async job queue or `threading` to handle training in background.

‚úÖ BRANDING:
- App name: **ForecastLab by Akshat Sogani**
- Footer must include:
   - ‚Äú¬© Akshat Sogani | [LinkedIn](https://www.linkedin.com/in/akshat-sogani/)‚Äù
- Include favicon/logo with "AS" initials (optional)

‚úÖ FUNCTIONALITY REQUIREMENTS:
- Replit-safe: memory-safe, no GPU needed
- Modular model structure: easy to extend
- Small default datasets, options to expand
- No breakdown or timeout from overloading RAM
- Responsive across desktop and mobile

‚úÖ LIBRARIES TO INCLUDE:

**Python**:
- fastapi
- uvicorn
- yfinance
- pandas / numpy
- statsmodels
- prophet
- xgboost
- keras / tensorflow (lite)
- ta / ta-lib
- optuna
- tradingeconomics (API)
- wbdata / requests
- matplotlib / seaborn / plotly

**Node.js**:
- express
- axios
- ejs or react
- chart.js / plotly.js
- tailwindcss or bootstrap

